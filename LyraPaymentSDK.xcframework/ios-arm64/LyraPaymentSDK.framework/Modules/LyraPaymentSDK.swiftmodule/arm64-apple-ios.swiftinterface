// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios15.1 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -enable-bare-slash-regex -module-name LyraPaymentSDK
import AVFoundation
import DeveloperToolsSupport
import Foundation
import LyraMaterial
@_exported import LyraPaymentSDK
import PassKit
import SnapKit
import Swift
import SwiftUI
import SystemConfiguration
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_inheritsConvenienceInitializers @objc final public class Lyra : ObjectiveC.NSObject {
  @objc public static func initialize(_ publicKey: Swift.String, _ options: [Swift.String : Any] = [:]) throws
  @objc public static func getSDKVersion() -> Swift.String
  @objc public static func process(_ contextViewController: UIKit.UIViewController, _ formToken: Swift.String, onSuccess: @escaping ((_ lyraResponse: LyraPaymentSDK.LyraResponse) -> Swift.Void), onError: @escaping ((_ error: LyraPaymentSDK.LyraError, _ lyraResponse: LyraPaymentSDK.LyraResponse?) -> Swift.Void), _ options: [Swift.String : Any] = [:]) throws
  @objc public static func cancelProcess()
  @objc public static func getFormTokenVersion() -> Swift.Int
  @objc override dynamic public init()
  @objc deinit
}
extension UIKit.UITextField {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func canPerformAction(_ action: ObjectiveC.Selector, withSender _: Any?) -> Swift.Bool
}
@_hasMissingDesignatedInitializers @objc public class LyraError : ObjectiveC.NSObject, Swift.Error {
  @objc public var errorCode: Swift.String
  @objc public var errorMessage: Swift.String
  @objc public var detailErrorCode: Swift.String
  @objc public var detailErrorMessage: Swift.String
  @objc public var isTechnicalError: Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class LyraResponse : ObjectiveC.NSObject {
  @objc public func getResponseDataString() -> Swift.String
  @objc public func getResponseData() -> Foundation.Data
  @objc deinit
}
public typealias Index = Swift.Int
public typealias Closure = () -> Swift.Void
public typealias SelectionClosure = (LyraPaymentSDK.Index, Swift.String) -> Swift.Void
public typealias MultiSelectionClosure = ([LyraPaymentSDK.Index], [Swift.String]) -> Swift.Void
public typealias ConfigurationClosure = (LyraPaymentSDK.Index, Swift.String) -> Swift.String
public typealias CellConfigurationClosure = (LyraPaymentSDK.Index, Swift.String, LyraPaymentSDK.DropDownCell) -> Swift.Void
@objc public protocol AnchorView {
  @objc var plainView: UIKit.UIView { get }
}
extension UIKit.UIView : LyraPaymentSDK.AnchorView {
  @_Concurrency.MainActor(unsafe) @objc dynamic public var plainView: UIKit.UIView {
    @objc get
  }
}
extension UIKit.UIBarButtonItem : LyraPaymentSDK.AnchorView {
  @_Concurrency.MainActor(unsafe) @objc dynamic public var plainView: UIKit.UIView {
    @objc get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class DropDownKH : UIKit.UIView {
  public enum DismissMode {
    case onTap
    case automatic
    case manual
    public static func == (a: LyraPaymentSDK.DropDownKH.DismissMode, b: LyraPaymentSDK.DropDownKH.DismissMode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Direction {
    case any
    case top
    case bottom
    public static func == (a: LyraPaymentSDK.DropDownKH.Direction, b: LyraPaymentSDK.DropDownKH.Direction) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) weak public static var VisibleDropDown: LyraPaymentSDK.DropDownKH?
  @_Concurrency.MainActor(unsafe) final public func setLabelText(_ text: Swift.String)
  @_Concurrency.MainActor(unsafe) final public func setColorForLabelText(_ color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) weak final public var anchorView: (any LyraPaymentSDK.AnchorView)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var direction: LyraPaymentSDK.DropDownKH.Direction
  @_Concurrency.MainActor(unsafe) final public var topOffset: CoreFoundation.CGPoint {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var bottomOffset: CoreFoundation.CGPoint {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var offsetFromWindowBottom: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var width: CoreFoundation.CGFloat? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var arrowIndicationX: CoreFoundation.CGFloat? {
    get
    set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic final public var cellHeight: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var backgroundColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) final public var dimmedBackgroundColor: UIKit.UIColor {
    get
    set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic final public var selectionBackgroundColor: UIKit.UIColor
  @objc @_Concurrency.MainActor(unsafe) dynamic final public var separatorColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic final public var cornerRadius: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic final public func setupCornerRadius(_ radius: CoreFoundation.CGFloat)
  @available(iOS 11.0, *)
  @objc @_Concurrency.MainActor(unsafe) dynamic final public func setupMaskedCorners(_ cornerMask: QuartzCore.CACornerMask)
  @objc @_Concurrency.MainActor(unsafe) dynamic final public var shadowOffset: CoreFoundation.CGSize {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic final public var shadowOpacity: Swift.Float {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic final public var shadowRadius: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic final public var animationduration: Swift.Double
  @_Concurrency.MainActor(unsafe) public static var animationEntranceOptions: UIKit.UIView.AnimationOptions
  @_Concurrency.MainActor(unsafe) public static var animationExitOptions: UIKit.UIView.AnimationOptions
  @_Concurrency.MainActor(unsafe) final public var animationEntranceOptions: UIKit.UIView.AnimationOptions
  @_Concurrency.MainActor(unsafe) final public var animationExitOptions: UIKit.UIView.AnimationOptions
  @_Concurrency.MainActor(unsafe) final public var downScaleTransform: CoreFoundation.CGAffineTransform {
    get
    set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic final public var textColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic final public var selectedTextColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic final public var textFont: UIKit.UIFont? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) final public var cellNib: UIKit.UINib {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var dataSource: [Swift.String] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var localizationKeysDataSource: [Swift.String] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var cellConfiguration: LyraPaymentSDK.ConfigurationClosure? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var customCellConfiguration: LyraPaymentSDK.CellConfigurationClosure? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var selectionAction: LyraPaymentSDK.SelectionClosure?
  @_Concurrency.MainActor(unsafe) final public var multiSelectionAction: LyraPaymentSDK.MultiSelectionClosure?
  @_Concurrency.MainActor(unsafe) final public var willShowAction: LyraPaymentSDK.Closure?
  @_Concurrency.MainActor(unsafe) final public var cancelAction: LyraPaymentSDK.Closure?
  @_Concurrency.MainActor(unsafe) final public var dismissMode: LyraPaymentSDK.DropDownKH.DismissMode {
    get
    set
  }
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc convenience dynamic public init()
  @_Concurrency.MainActor(unsafe) convenience public init(anchorView: any LyraPaymentSDK.AnchorView, selectionAction: LyraPaymentSDK.SelectionClosure? = nil, dataSource: [Swift.String] = [], topOffset: CoreFoundation.CGPoint? = nil, bottomOffset: CoreFoundation.CGPoint? = nil, cellConfiguration: LyraPaymentSDK.ConfigurationClosure? = nil, cancelAction: LyraPaymentSDK.Closure? = nil)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
}
extension LyraPaymentSDK.DropDownKH {
  @_Concurrency.MainActor(unsafe) @objc override final public func updateConstraints()
  @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
}
extension LyraPaymentSDK.DropDownKH {
  @objc(show) @_Concurrency.MainActor(unsafe) final public func objc_show() -> Foundation.NSDictionary
  @discardableResult
  @_Concurrency.MainActor(unsafe) final public func show(onTopOf window: UIKit.UIWindow? = nil, beforeTransform transform: CoreFoundation.CGAffineTransform? = nil, anchorPoint: CoreFoundation.CGPoint? = nil) -> (canBeDisplayed: Swift.Bool, offscreenHeight: CoreFoundation.CGFloat?)
  @_Concurrency.MainActor(unsafe) @objc override final public func accessibilityPerformEscape() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) final public func hide()
}
extension LyraPaymentSDK.DropDownKH {
  @_Concurrency.MainActor(unsafe) final public func reloadAllComponents()
  @_Concurrency.MainActor(unsafe) final public func selectRow(at index: LyraPaymentSDK.Index?, scrollPosition: UIKit.UITableView.ScrollPosition = .none)
  @_Concurrency.MainActor(unsafe) final public func selectRows(at indices: Swift.Set<LyraPaymentSDK.Index>?)
  @_Concurrency.MainActor(unsafe) final public func deselectRow(at index: LyraPaymentSDK.Index?)
  @_Concurrency.MainActor(unsafe) final public func deselectRows(at indices: Swift.Set<LyraPaymentSDK.Index>?)
  @_Concurrency.MainActor(unsafe) final public var indexForSelectedRow: LyraPaymentSDK.Index? {
    get
  }
  @_Concurrency.MainActor(unsafe) final public var selectedItem: Swift.String? {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) final public func selectRow(_ index: Swift.Int, scrollPosition: UIKit.UITableView.ScrollPosition = .none)
  @objc @_Concurrency.MainActor(unsafe) final public func clearSelection()
  @objc @_Concurrency.MainActor(unsafe) final public func deselectRow(_ index: Swift.Int)
  @objc @_Concurrency.MainActor(unsafe) final public var indexPathForSelectedRow: Foundation.NSIndexPath? {
    @objc get
  }
}
extension LyraPaymentSDK.DropDownKH : UIKit.UITableViewDataSource, UIKit.UITableViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func tableView(_: UIKit.UITableView, numberOfRowsInSection _: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc final public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc final public func tableView(_: UIKit.UITableView, willDisplay cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc final public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
}
extension LyraPaymentSDK.DropDownKH {
  @_Concurrency.MainActor(unsafe) @objc override final public func hitTest(_ point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> UIKit.UIView?
}
extension LyraPaymentSDK.DropDownKH {
  @objc @_Concurrency.MainActor(unsafe) public static func startListeningToKeyboard()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class DropDownCell : UIKit.UITableViewCell {
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) open var optionLabel: UIKit.UILabel!
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension LyraPaymentSDK.DropDownCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isSelected: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isHighlighted: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setHighlighted(_ highlighted: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
}
public class TLCustomMask {
  public var formattingPattern: Swift.String {
    get
    set(newPattern)
  }
  public init(formattingPattern: Swift.String = "")
  public func formatStringMixed(string: Swift.String) -> Swift.String
  public func formatString(string: Swift.String) -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class LyraMobError : LyraPaymentSDK.LyraError {
  @objc deinit
}
@objc public enum LyraPaymentMethods : Swift.Int {
  case cardPayment
  case applePay
  case all
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension LyraPaymentSDK.DropDownKH {
  @_Concurrency.MainActor(unsafe) final public class func setupDefaultAppearance()
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc final public class LyraInitOptions : ObjectiveC.NSObject {
  @objc public static let themeFileName: Swift.String
  @objc public static let apiServerName: Swift.String
  @objc public static let cardScanningEnabled: Swift.String
  @objc public static let applePayMerchantId: Swift.String
  @objc public static let applePayMerchantName: Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc final public class LyraPaymentOptions : ObjectiveC.NSObject {
  @objc public static let customPayButtonLabel: Swift.String
  @objc public static let customHeaderLabel: Swift.String
  @objc public static let customPopupLabel: Swift.String
  @objc public static let paymentMethodType: Swift.String
  @objc deinit
}
extension LyraPaymentSDK.DropDownKH.DismissMode : Swift.Equatable {}
extension LyraPaymentSDK.DropDownKH.DismissMode : Swift.Hashable {}
extension LyraPaymentSDK.DropDownKH.Direction : Swift.Equatable {}
extension LyraPaymentSDK.DropDownKH.Direction : Swift.Hashable {}
extension LyraPaymentSDK.LyraPaymentMethods : Swift.Equatable {}
extension LyraPaymentSDK.LyraPaymentMethods : Swift.Hashable {}
extension LyraPaymentSDK.LyraPaymentMethods : Swift.RawRepresentable {}
